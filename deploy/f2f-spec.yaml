openapi: 3.0.1
info:
  title:
     Fn::Sub: "${AWS::StackName} - F2F Credential Issuer Private API"
  version: "1.0"
  description: >-
    Face to Face CRI - Frontend and Backend API specification
  contact:
    name: Darren Dunford
    email: darren.dunford@digital.cabinet-office.gov.uk
servers:
  - url: https://www.example.com
tags:
  - name: Backend - Common CRI Lambda
    description: Backend endpoints implemented by the Common CRI Lambda functions
  - name: Backend - F2F CRI specific
    description: Backend endpoints implementing functions specific to the Claimed Identity CRI
  - name: Frontend
    description: Frontend endpoints implementing rendering and routing

paths:

  /callback:
    post:
      operationId: postCallback
      summary: callback endpoint for asynchronous notifications from Yoti
      description: >-
        Endpoint is registered as the notifications callback with Yoti in the
        call to `POST /session`
      tags:
        - Callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallbackRequest'
      responses:
        '202':
          description: Accepted
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        '500':
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ "YotiCallbackQueueRole", "Arn" ]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${YotiCallbackQueue.QueueName}"
        passthroughBehavior: "never"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body"
        responses:
          default:
            statusCode: "202"
        type: "aws"

  /token:
    post:
      operationId: postToken
      summary: Exchange an Authorization Code for an Access Token
      description: >-
        Issue Access Token. OAuth2 standard endpoint which exchanges the authorization_code supplied and
        returns a signed access_token which can be used directly in API calls as a Bearer token. Note
        the service will only issue an access token once for any given session.
      tags:
        - Backend - F2F CRI specific
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IssueTokenRequest'
      responses:
        "200":
          description: >-
            Created - OAuth token is valid - Session details have been stored in the backend and a `session_id`
            is returned.
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueTokenResponse"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "requestParamsOnly"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Access-Token-${AWS::StackName}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /authorization:
    get:
      operationId: getAuthorization
      summary: Issue an authorization code for the session
      description: >-
        Issue Authorization Code - Issue an authorization code for the frontend to use in the redirected
        response to a `GET /authorize` call. This service will only work if the vendor data is recorded as being
        received for that session; and this service can only be used once for each session.
      tags:
        - Backend - F2F CRI specific
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "Issue an authorization code. Note - currently persists the code against the session as a side effect"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "401":
          description: "Unauthorized"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizationFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /session:
    post:
      operationId: postVerifyAuthorizeRequest
      summary: Verify the incoming JAR request and initiate a Session
      description: >-
        Verify Authorization Request - Verify the [JAR request](https://datatracker.ietf.org/doc/rfc9101/)
        received from calling RP. This service only supports section Passing a Request Object by Value (see
        section 5.1). If verified, a new session will be created and a `session_id` will be returned to the
        caller.
      tags:
        - Backend - F2F CRI specific
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      parameters:
        - $ref: '#/components/parameters/AuditHeader'
      responses:
        "201":
          description: >-
            Created - OAuth token is valid - Session details have been stored in the backend and a `session_id`
            is returned.
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /documentSelection:
    post:
      operationId: postDocumentSelection
      summary: submit information required to initiate the vendor session
      description: >-
        submit the post office selection, document selection and contact information required to initiate the vendor
        session
      tags:
        - Backend - F2F CRI specific
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSelectionRequest'
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/AuditHeader'
      responses:
        "201":
          description: >-
            Created - the underlying vendor session has been created
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "400":
          description: >-
            Bad Request - document selection data failed validation and has not been persisted
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentSelectionFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /sessionConfiguration:
    get:
      operationId: getSessionConfiguration
      summary: return the session configuration information as provided in the JAR
      description: >-
        return the session configuration information as provided in the JAR used to initiate
        this identity proving session
      tags:
        - Backend - F2F CRI specific
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        "200":
          description: >-
            OK - session configuration data returned
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionConfigurationResponse"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionConfigFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /.well-known/jwks.json:
    get:
      operationId: getWellKnownJwksJson
      summary: Retrieve the signing public keys for JWTs issued by `POST /userinfo`.
      description: >-
        Return the current valid public keys used to sign JWTs issued by the service as a JSON Web Key Set
      tags:
        - Backend - F2F CRI specific
      responses:
        "200":
          description: >-
            OK - key ring returned
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKSFile"
        "400":
          description: 400 response
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        credentials:
          Fn::GetAtt: [ "JWKSBucketRole", "Arn" ]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${JsonWebKeysBucket}/.well-known/jwks.json"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /userinfo:
    post:
      operationId: postUserInfo
      summary: Responds with pending status for a given Auth Session.
      description: >-
        Returns a Json response with pending status to any valid request. Requires an access token as issued by `POST /token`, and can only be called once.
      tags:
        - Backend - F2F CRI specific
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        "202":
          description: >-
            Accepted
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoResponse"
        "400":
          description: >-
            Bad Request - Access token validation fails.
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:User-Info-${AWS::StackName}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /abort:
    post:
      operationId: abort
      summary: Terminate a session without issuing an authorization code
      description: >-
        End the users session in a failed state. Enables the OAuth2 error to be performed by the front end on redirect. This service can only be used once per session.
      requestBody:
        description: A JSON object describing the reason for authorization rejection.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbortRequest"
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/AuditHeader'
      tags:
        - Backend - F2F CRI specific
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
        "401":
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
      # TODO should be changed to "both" when lambda is using the body
      x-amazon-apigateway-request-validator: "requestParamsOnly"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AbortFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /person-info:
    get:
      operationId: getPersonInfo
      summary: Return the personal information stored for given session ID
      description: >-
        Return encrypted personal information needed to pre populate information on the frontend
      parameters:
        - $ref: '#/components/parameters/SessionId'
      tags:
        - Backend - F2F CRI specific
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonInfoResponse"
        "401":
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonInfoFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /person-info-key:
    get:
      operationId: getPersonInfoKey
      summary: Return the key required for decrypting response from the person-info endpoint
      tags:
        - Backend - F2F CRI specific
      responses:
        "200":
          description: "Return key"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonInfoKeyResponse"
        "401":
          description: "Unauthorized"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonInfoKeyFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /addressLocations:
    post:
      operationId: getOsPlacesData
      summary: Query the Ordnance Survey API for address locations based on postcode
      tags:
        Backend - F2F CRI specific
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/PostCode'
      responses:
        "200":
          description: >-
            OK - address location data returned
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OsLocationsResponse"
        "401":
          description: "Unauthorized"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddressLocationsFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

components:
  schemas:
    CallbackRequest:
      description: "payload received from Yoti for a notification callback"
      required:
        - session_id
        - topic
      additionalProperties: true
      properties:
        session_id:
          type: string
          format: uuid
          description: "session_id as returned in original call to `POST /session`"
          example: "11111111-1111-1111-1111-111111111111"
        topic:
          type: string
          enum:
            - "resource_update"
            - "task_completion"
            - "check_completion"
            - "session_completion"
            - "thank_you_email_requested"
          description: indicates notification message type
          example: "session_completion"
        task_id:
          type: string
          description: "Optional and present only when `topic` is `task_completion`"
        resource_id:
          type: string
          description: "Optional and present only when `topic` is `resource_update`"
        check_id:
          type: string
          description: "Optional and present only when `topic` is `check_completion`"
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "981bb74c-3b5e-462e-ba3a-abf868e5da68"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    SessionRequest:
      type: object
      additionalProperties: false
      required:
        - client_id
        - request
      properties:
        client_id:
          type: string
          example: abcdefgh
          description: >-
            the OAuth client identifier which has been registered with F2F
        request:
          type: string
          example: eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0.AISIEvimTkm_1gfG9gQA5btB7lHu2riU90KI-UyuH35CABCJk_KKUTsptasmNG5n6Zo6jL8vlMrj3y4A44nDrnTeH_OGLByerCd-EKNx9EZrplcsQ8VM8dip7LCUQy10OGH6ggoMGq9TbiC7lP_8md8UgvcNzd_zm6q6Ade5zd_sUzTWNSX3q6lVfpkpuMdj-2l18zk-yJEvaDArP7U1VBT8531ixxW1lUKflTHlyC-t6B-45R04o3KubhVb-_gVt7KKXo7UQUY-wmHiTUGsxWb3xrROKs6tv4Ug7Oi1MVngesL8CahjyLamvk-tdS1ji2rxn47Xs2Q21FQf3cHPtQ.9bNdWPzw2Cf6uyR_.VVj96Ejcc84yKv3gfHY6Nond9FJrQ-AoQ7pQSlmnzicoJ7hpHwyHUuNiSJNO4q631VKAblNbdprAA11PcYL3f_hcocxwORR8e3tQlDG9TFn6lxg3l9M34ccJrkD51ippIpsChQhIFqS2hU5W9BFyOPdpQhlhtc7R-d0zqbylh-z-snzxRG7Q-hVsBQpOzOLMDWcJNOCHlF8kZjp4dlWYFj3Yl_9HAa-hrY-DpoxdkvXVIrBdJarD77Bwwxo8y1IWEgCuDA8t5ZmrZMY9fxoufQg9jW5D7hB3qysgSo3S-6SFyt3rP_WD5ecezRrTCY-voDeWBtfdwuKo5UUaPidN4ut1n8SXAdoANxgbuEhyABjvMESi3AnWwZRx8yh3xEMVSwZ8kFQ4cVeBW2hrkiSXMjL1Wtz6nhhY9itFcmzBU4JMvoYfdf-ZZP-F4ph_Xh9CRS7rBzmrgUt81LahzYfCY91lS93qT7r3Wrh0OfIb0vvIkVUebDdCZw25PoG2oREty4k59z7j9ho8VqbtSS6_kpJGWx8Sikut1I-bVduk79Vf1MwEGxSRvZ_pyZHxxZDe19GPfamhctFXMcebyJoT2zwWhcW4AWFSUtm2JI36sZhFcsdRIRBfSjJ4MNXdlrHdOyhvo8SwTWpfO5lU9yyF8lANbXxjdnRSV6sR1iaBs_16slbWJX3WC6RmC76x8MlHn1fLBK_lU_IeZChZqLCwqUC3CXbk17OkTkdeCqFyZSS5rlfm-EiPvam6iW51tA-ywxrmUjkCDE_k-zZIZTVVSg.3YAfgcQ4ZkPtYPNvOzWCLQ
          description: >-
            an JWT which has been signed with the clients signing private key and encrypted with the F2F public
            encryption key.
    IssueTokenRequest:
      type: object
      additionalProperties: false
      required:
        - grant_type
        - code
        - redirect_uri
      properties:
        grant_type:
          type: string
          example: authorization_code
          description: >-
            OAuth grant type. At present the only supported grant type is `authorization_code`.
          enum:
            - authorization_code
        code:
          type: string
          format: uuid
          example: 33333333-3333-3333-3333-333333333333
          description: >-
            `authorization_code` as issued by POST /authorizationCode.
        redirect_uri:
          type: string
          example: https://www.example.com/receiveToken
          description: >-
            the OAuth client identifier which has been registered with CI CRI
        client_assertion:
          type: string
          example: abcdefgh
          description: >-
            Client assertion (use for client credentials flow, not supported here)
        client_assertion_type:
          type: string
          example: jwt_bearer
          description: >-
            Client assertion type (use for client credentials flow, not supported here)
    DocumentSelectionRequest:
      type: object
      additionalProperties: false
      required:
        - document_selection
      properties:
        document_selection:
          type: object
          additionalProperties: false
          required:
            - document_selected
            - date_of_expiry
            - country_code
          properties:
            country_code:
              type: string
              pattern: ^[A-Z]{3}$
              example: "GBR"
              description: 3-letter country iso code
            document_selected:
              type: string
              example: ukPhotocardDl
              description: >-
                specifies which of the available supported document types the user elected to present for offline
                verification
              enum:
                - ukPassport
                - ukPhotocardDl
                - nonUkPassport
                - euPhotocardDl
                - eeaIdentityCard
            date_of_expiry:
              type: string
              format: date
              example: "1970-01-01"
              description: claimed expiry date for the document to be presented at the post office
        post_office_selection:
          type: object
          additionalProperties: true
          required:
            - address
            - post_code
            - fad_code
          properties:
            name:
              type: string
              description: >-
                display name of the post office, to be displayed literally in the instructions PDF
              example: "Post Office"
              maxLength: 60
            address:
              type: string
              description: >-
                full address without the postcode on a single line, to be displayed literally in the instructions PDF
              example: "1 The Street, Funkytown"
              maxLength: 60
            location:
              type: object
              required:
                - latitude
                - longitude
              additionalProperties: false
              properties:
                latitude:
                  type: number
                  description: latitude for the Post Office location
                  example: 0.34322
                  minimum: -90
                  maximum: 90
                longitude:
                  type: number
                  description: longitude for the Post Office location
                  example: -42.48372
                  minimum: -180
                  maximum: 180
            post_code:
              type: string
              description: Post code of post office
              example: "N1 2AA"
              pattern: ^[A-Za-z]{1,2}\d[A-Za-z\d]?\ ?\d[a-zA-Z]{2}$|^[Gg][Ii][Rr]\s?0[Aa]{2}$|^[Bb][Ff][Pp][Oo]\ ?\d{1,4}$
              maxLength: 30
            fad_code:
              type: string
              description: Fad code of post office
              example: "004010X"
              maxLength: 60
        pdf_preference:
          type: string
          additionalProperties: false
          maxLength: 60
        postal_address:
          type: object
          additionalProperties: false
          properties:
            uprn:
              type: string
              description: Unique Property Reference Number
              example: "123456789"
              maxLength: 60
            departmentName:
              type: string
              description: Name of department registered at organisation address
              example: "Greggs 1"
              maxLength: 60
            organisationName:
              type: string
              description: Name of organisation registered at address
              example: "Greggs"
              maxLength: 60
            subBuildingName:
              type: string
              description: Name of residential sub unit
              example: "Flat 20"
              maxLength: 60
            buildingName:
              type: string
              description: Name of building
              example: "Krelboyne Mansions"
              maxLength: 60
            buildingNumber:
              type: string
              description: Number of building on street
              example: "32"
              maxLength: 30
            thoroughfareName:
              type: string
              description: Dependent thoroughfare
              example: "Hazelnut Street"
              maxLength: 60
            addressLocality:
              type: string
              description: Name of locality
              example: "London"
              maxLength: 60
            doubleLocality:
              type: string
              description: To distinguish between similar thoroughfares within a dependent locality.
              example: "London"
              maxLength: 60
            postalCode:
              type: string
              description: Postal code
              example: "SW1A1AA"
              maxLength: 30
            preferredAddress:
              type: boolean
              description: Indicates user's preferred address for postal correspondence 
              example: true
              maxLength: 60
    JWKSFile:
      type: object
      required:
        - keys
      additionalProperties: true
      properties:
        keys:
          type: array
          description: >-
            The value of the `keys` parameter is an array of JWK values. By default, the order of the JWK
            values within the array does not imply an order of preference among them, although applications of
            JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
          items:
            type: object
            additionalProperties: true
            description: >-
              A JSON Web Key (JWK) as defined by [RFC7517](https://www.rfc-editor.org/rfc/rfc7517)
            properties:
              kty:
                type: string
                description: >-
                  The `kty` (key type) parameter identifies the cryptographic algorithm family used with the
                  key, such as `RSA or `EC`
              use:
                type: string
                enum:
                  - sig
                  - enc
                description: >-
                  The "use" (public key use) parameter identifies the intended use of the public key.  The
                  "use" parameter is employed to indicate whether a public key is used for encrypting data or
                  verifying the signature on data. Valid values are `sig` (signature) and `enc` (encryption).
              key_ops:
                type: string
                description: >-
                  The `key_ops` (key operations) parameter identifies the operation(s) for which the key is
                  intended to be used.  The `key_ops` parameter is intended for use cases in which public,
                  private, or symmetric keys may be present.
              alg:
                type: string
                description: >-
                  The `alg` (algorithm) parameter identifies the algorithm intended for use with the key.
              kid:
                type: string
                description: >-
                  The `kid` (key ID) parameter is used to match a specific key. This is used, for instance,
                  to choose among a set of keys within a JWK Set during key rollover.  The structure of the
                  `kid` value is unspecified.
              x5u:
                type: string
                format: uri
                description: >-
                  The `x5u` (X.509 URL) parameter is a URI that refers to a resource for an X.509 public key
                  certificate or certificate chain.
              x5c:
                type: array
                description: >-
                  The `x5c` (X.509 certificate chain) parameter contains a chain of one or more PKIX
                  certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate
                  value strings.
                items:
                  type: string
                  description: PKIX certificate [RFC5280]
              x5t:
                type: string
                description: >-
                  The `x5t` (X.509 certificate SHA-1 thumbprint) parameter is a base64url-encoded SHA-1
                  thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate.
              x5t#S256:
                type: string
                description: >-
                  The `x5t#S256` (X.509 certificate SHA-256 thumbprint) parameter is a base64url-encoded
                  SHA-256 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate.
            required:
              - kty
    UserInfoResponse:
      type: object
      additionalProperties: true
      required:
        - sub
        - 'https://vocab.account.gov.uk/v1/credentialStatus'
      properties:
        sub:
          type: string
          format: uuid
          description: >-
            `sub` value - this should be the same as encoded in the signed JWT
          example: 22222222-2222-2222-2222-222222222222
        'https://vocab.account.gov.uk/v1/credentialStatus':
          type: string
          description: >-
            pending status returned back to IPV Core for a valid request
          example: pending
    IssueTokenResponse:
      type: object
      additionalProperties: true
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: >-
            The actual issued access token. Note this is a short-lived bearer token and needs to be
            protected as a secret.
          example: ABCDABCDABCDABCDABCDABCDABCD
        token_type:
          type: string
          example: bearer
          description: >-
            Token type - usually `bearer`.
        expires_in:
          type: number
          description: >-
            The lifetime in seconds of the issued access token
          example: 3600
    SessionConfigurationResponse:
      type: object
      additionalProperties: true
      properties:
        evidence_requested:
          type: object
          additionalProperties: true
          properties:
            strengthScore:
              type: number
              description: if supplied, minimum strength score required
              example: 4
        pcl_enabled:
          type: string
          example: true
          description: >-
            returns the printed customer letter enabled flag- true/false
    OAuthErrorResponse:
      type: object
      additionalProperties: true
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - access_denied
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
            - server_error
            - temporarily_unavailable
            - unsupported_response_type
            - authorization_pending
          example: access_denied
          description: >-
            A single ASCII [USASCII] error code from the following
        error_description:
          type: string
          example: Access was denied as auth code was not recognised
          description: >-
            Human-readable ASCII [USASCII] text providing additional information, used to assist the
            client developer in understanding the error that occurred.
        error_uri:
          type: string
          example: https://example.com/error1.html
          description: >-
            A URI identifying a human-readable web page with information about the error, used to
            provide the client developer with additional information about the error.
    SessionResponse:
      type: object
      additionalProperties: true
      required:
        - session_id
        - redirect_uri
        - state
      properties:
        session_id:
          type: string
          description: Session ID
          format: uuid
          example: 11111111-1111-1111-1111-111111111111
        state:
          type: string
          example: abcdefgh
          description: >-
            The exact value for `state` as received from the client in the authorization request
        redirect_uri:
          type: string
          example: https://www.example.com/receiveToken
          description: >-
            the OAuth client identifier which has been registered with CI CRI
    WriteTxmaRequest:
      type: object
      required:
        - event_name
      properties:
        event_name:
          type: string
          description: The name of the txma event being written to SQS
          example: F2F_AUTH_CODE_ISSUED
          enum:
            - F2F_SESSION_CREATED
            - F2F_SESSION_ABORTED
            - F2F_AUTH_CODE_ISSUED
            - F2F_ACCESS_TOKEN_ISSUED
    AbortRequest:
      type: object
      additionalProperties: true
      properties:
        reason:
          type: string
          description: The reason for the abort request
          example: ACCESS_DENIED
          enum:
            # User has specifically requested to abort
            - ACCESS_DENIED
            # The service is shut down for operational reasons
            - OAUTH_NOT_ENABLED
    PersonInfoResponse:
        type: string
        description: encrypted string containing person info
    OsLocationsResponse:
        type: string
        description: JSON string containing list of address info
  parameters:
    SessionHeader:
      name: session-id
      in: header
      description: A UUID generated by the Session API to act as a primary key for the Session in DynamoDB
      required: true
      schema:
        type: string
    ResponseType:
      in: query
      name: response_type
      example: code
      required: true
      description: the type of authorization response that is expected
      schema:
        type: string
    ClientId:
      in: query
      name: client_id
      example: xxx
      required: true
      description: the OAuth client identifier which has been registered with CI CRI
      schema:
        type: string
    Request:
      in: query
      name: request
      example: eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0.AISIEvimTkm_1gfG9gQA5btB7lHu2riU90KI-UyuH35CABCJk_KKUTsptasmNG5n6Zo6jL8vlMrj3y4A44nDrnTeH_OGLByerCd-EKNx9EZrplcsQ8VM8dip7LCUQy10OGH6ggoMGq9TbiC7lP_8md8UgvcNzd_zm6q6Ade5zd_sUzTWNSX3q6lVfpkpuMdj-2l18zk-yJEvaDArP7U1VBT8531ixxW1lUKflTHlyC-t6B-45R04o3KubhVb-_gVt7KKXo7UQUY-wmHiTUGsxWb3xrROKs6tv4Ug7Oi1MVngesL8CahjyLamvk-tdS1ji2rxn47Xs2Q21FQf3cHPtQ.9bNdWPzw2Cf6uyR_.VVj96Ejcc84yKv3gfHY6Nond9FJrQ-AoQ7pQSlmnzicoJ7hpHwyHUuNiSJNO4q631VKAblNbdprAA11PcYL3f_hcocxwORR8e3tQlDG9TFn6lxg3l9M34ccJrkD51ippIpsChQhIFqS2hU5W9BFyOPdpQhlhtc7R-d0zqbylh-z-snzxRG7Q-hVsBQpOzOLMDWcJNOCHlF8kZjp4dlWYFj3Yl_9HAa-hrY-DpoxdkvXVIrBdJarD77Bwwxo8y1IWEgCuDA8t5ZmrZMY9fxoufQg9jW5D7hB3qysgSo3S-6SFyt3rP_WD5ecezRrTCY-voDeWBtfdwuKo5UUaPidN4ut1n8SXAdoANxgbuEhyABjvMESi3AnWwZRx8yh3xEMVSwZ8kFQ4cVeBW2hrkiSXMjL1Wtz6nhhY9itFcmzBU4JMvoYfdf-ZZP-F4ph_Xh9CRS7rBzmrgUt81LahzYfCY91lS93qT7r3Wrh0OfIb0vvIkVUebDdCZw25PoG2oREty4k59z7j9ho8VqbtSS6_kpJGWx8Sikut1I-bVduk79Vf1MwEGxSRvZ_pyZHxxZDe19GPfamhctFXMcebyJoT2zwWhcW4AWFSUtm2JI36sZhFcsdRIRBfSjJ4MNXdlrHdOyhvo8SwTWpfO5lU9yyF8lANbXxjdnRSV6sR1iaBs_16slbWJX3WC6RmC76x8MlHn1fLBK_lU_IeZChZqLCwqUC3CXbk17OkTkdeCqFyZSS5rlfm-EiPvam6iW51tA-ywxrmUjkCDE_k-zZIZTVVSg.3YAfgcQ4ZkPtYPNvOzWCLQ
      required: true
      description: >-
        an JWT which has been signed with the clients signing private key and encrypted with the F2F public
        encryption key.
      schema:
        type: string
    Authorization:
      in: header
      name: Authorization
      example: bearer abcdefghijklmnopqrstuvwxyz
      required: true
      description: >-
        OAuth Bearer token - this it the `authorizationCode` returned by `POST /claimedIdentity`
      schema:
        type: string
    SessionId:
      in: header
      name: x-govuk-signin-session-id
      schema:
        type: string
        format: uuid
      example: 44444444-4444-4444-4444-444444444444
      description: >-
        `sessionId` as returned by `POST /session` endpoint
      required: true
    AuditHeader:
      name: txma-audit-encoded
      in: header
      description: An encoded header sent by the FE containing info about request origin
      required: false
      schema:
        type: string
    PostCode:
      in: header
      name: postcode
      required: true
      schema:
        type: string
      example: SW1A 2AA
      description: >-
        A postcode used in the call to the Ordnance Survey API
      required: true

x-amazon-apigateway-request-validators:
    both:
      validateRequestBody: true
      validateRequestParameters: true
    requestBodyOnly:
      validateRequestBody: true
      validateRequestParameters: false
    requestParamsOnly:
      validateRequestBody: false
      validateRequestParameters: true
