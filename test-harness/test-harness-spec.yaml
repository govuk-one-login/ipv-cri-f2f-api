openapi: 3.0.1

info:
  title:
    Fn::Sub: ${AWS::StackName} - F2F Test automation harness API
  version: "1.1" # Updated version number
  description: F2F Test automation harness API specification

servers:
  - url: https://www.example.com

tags:
  - name: Testing - API to enable automation
    description: Endpoint implemented to enable testing

x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Allow"
      Principal:
        AWS: "${AWS::AccountId}"
      Action: "execute-api:Invoke"
      Resource: "execute-api:/*"

paths:
  /bucket/:
    get:
      operationId: getBucket
      summary: List the contents of the test harness bucket
      description: >-
        Endpoint to list the contents of the test harness bucket. Up to 1000 objects are returned, sorted by ascending
        key. A `prefix` can be specified as a query parameter to filter the results.
      security:
        - SigV4Reference: []
      parameters:
        - $ref: '#/components/parameters/Prefix'
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: GET
        credentials:
          Fn::GetAtt:
            - AccessTestHarnessRole
            - Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${EventTestBucket}/"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          integration.request.querystring.prefix: "method.request.querystring.prefix"
        responses:
          default:
            statusCode: "200"
        type: aws
  /object/{object-key+}:
    get:
      operationId: getTestObject
      summary: Get an object from the test bucket
      description: >-
        Endpoint returns the contents of a specific object from the test bucket.
      security:
        - SigV4Reference: []
      parameters:
        - $ref: '#/components/parameters/ObjectKey'
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: GET
        credentials:
          Fn::GetAtt:
            - AccessTestHarnessRole
            - Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${EventTestBucket}/{key}"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          integration.request.path.key: "method.request.path.object-key"
        responses:
          default:
            statusCode: "200"
        type: aws
  /get-record/{tableName}/{keyId}:
    get:
      operationId: getRecordById
      summary: Get a record by Id from DynamoDB
      description: |
        Endpoint to get a record from DynamoDB using tableName and keyId. The primary key is sessionId.
        If a record is found, it will be returned. Otherwise, it will return "No record found".
      parameters:
        - $ref: '#/components/parameters/TableName'
        - $ref: '#/components/parameters/KeyId'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  record:
                    type: object
                    description: The found record from DynamoDB.
                    # Add other properties based on the structure of your record
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "No record found"
      x-amazon-apigateway-request-validator: params-only
      x-amazon-apigateway-integration:
        httpMethod: GET
        credentials:
          Fn::GetAtt:
            - DynamoDbAccessRole
            - Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.querystring.TableName: "method.request.path.tableName"
          integration.request.querystring.Key: "method.request.path.keyId"
        type: aws
components:
  securitySchemes:
    SigV4Reference:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
  parameters:
    ObjectKey:
      in: path
      name: object-key
      example: /ipv-core/sub-timestamp-messageId
      required: true
      description: Key to query bucket with
      schema:
        type: string
        minLength: 1
    Prefix:
      in: query
      name: prefix
      example: txma/
      required: false
      description: Prefix to list objects from bucket with
      schema:
        type: string
    TableName:
      in: path
      name: tableName
      example: "TestRecordsTable"
      required: true
      description: Name of the DynamoDB table to query
      schema:
        type: string
    KeyId:
      in: path
      name: keyId
      example: "sessionId123"
      required: true
      description: The value of the sessionId primary key to find the record in DynamoDB
      schema:
        type: string
