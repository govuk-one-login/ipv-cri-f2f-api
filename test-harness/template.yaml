AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity F2F Test Automation Harness"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  # TODO Do we need this?
  SecretPrefix:
    Type: String
    Default: "none"
    Description: Secrets name prefix
  VpcStackName:
    Type: String
    Default: "vpc-cri"
    Description: The name of the VPC stack deployed.

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:
      logretentionindays: 3
      apiTracingEnabled: true
    build:
      logretentionindays: 3
      apiTracingEnabled: true

  PlatformConfiguration:
    dev:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
      TxMASQS: arn:aws:sqs:eu-west-2:440208678480:f2f-cri-api-TxMASQSQueue-3bDDN8hQxMfT
      TxMAKey: "arn:aws:kms:eu-west-2:440208678480:key/93ba6f33-9cb9-4609-b6e1-c4347b5893b0"
      IPVCoreSQS: "arn:aws:sqs:eu-west-2:440208678480:f2f-cri-api-IPVCoreSQSQueue-RZMtPmFpB6WO"
      IPVCoreKey: "arn:aws:kms:eu-west-2:440208678480:key/edb6d987-bab1-40dd-8da0-7d732f1f82e3"
    build:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
      # TODO
      TxMASQS: "mock-sqs"
      TxMAKey: "mock-kms"
      IPVCoreSQS: "mock-sqs"
      IPVCoreKey: "mock-kms"

  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
    build:
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseSecretPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref SecretPrefix
          - "none"

Globals:
  Function:
    Runtime: nodejs18.x
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt LambdaEgressSecurityGroup.GroupId
      SubnetIds:
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdB"
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        AWS_STACK_NAME: !Sub ${AWS::StackName}
        POWERTOOLS_LOG_LEVEL: DEBUG
        POWERTOOLS_METRICS_NAMESPACE: F2F-CRI
        SECRET_PREFIX: !If [
          UseSecretPrefix,
          !Ref SecretPrefix,
          !Ref AWS::StackName,
        ] # What is this? @TODO
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ### Function Definition
  ## DequeueHandler
  DequeueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "F2F-Test-Dequeue-${AWS::StackName}"
      Handler: DequeueHandler.lambdaHandler
      CodeUri: ./src/
      Environment:
        Variables:
          EVENT_TEST_BUCKET_NAME: !Ref EventTestBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref EventTestBucket
        - S3ReadPolicy:
            BucketName: !Ref EventTestBucket
        - Statement:
            - Sid: TxMAKMSDecryptkeysPolicy
              Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource: !FindInMap [PlatformConfiguration, !Ref Environment, TxMAKey]
            - Sid: TxMASQSConsumeEventPolicy
              Effect: Allow
              Action:
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:ChangeMessageVisibility"
                - "sqs:ReceiveMessage"
              Resource: !FindInMap [PlatformConfiguration, !Ref Environment, TxMASQS]
        - Statement:
            - Sid: IPVCoreKMSDecryptkeysPolicy
              Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource: !FindInMap [PlatformConfiguration, !Ref Environment, IPVCoreKey]
            - Sid: IPVCoreSQSConsumeEventPolicy
              Effect: Allow
              Action:
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:ChangeMessageVisibility"
                - "sqs:ReceiveMessage"
              Resource: !FindInMap [PlatformConfiguration, !Ref Environment, IPVCoreSQS]
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !FindInMap [PlatformConfiguration, !Ref Environment, TxMASQS]
            BatchSize: 1
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !FindInMap [PlatformConfiguration, !Ref Environment, IPVCoreSQS]
            BatchSize: 1
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - DequeueHandler.ts

  EventTestBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-f2f-event-test-${Environment}
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
# Outputs:
