AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity F2F Test Automation Harness"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  # Do we need this?
  SecretPrefix:
    Type: String
    Default: "none"
    Description: Secrets name prefix
  VpcStackName:
    Type: String
    Default: "vpc-cri"
    Description: The name of the VPC stack deployed.

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:
      logretentionindays: 3
      apiTracingEnabled: true
    build:
      logretentionindays: 3
      apiTracingEnabled: true

  PlatformConfiguration:
    dev:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    build:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython

  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
    build:
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days

  TxMAAccounts:
    # EVENTS is used to egress to TxM - we might not need it here?
    dev:
      AUDIT: arn:aws:iam::725018305812:root
      EVENTS: arn:aws:iam::248098332657:root
    build:
      AUDIT: arn:aws:iam::761029721660:root
      EVENTS: arn:aws:iam::750703655225:root
    staging:
      AUDIT: arn:aws:iam::778587367904:root
      EVENTS: arn:aws:iam::178023842775:root
    integration:
      AUDIT: arn:aws:iam::423448613278:root
      EVENTS: arn:aws:iam::729485541398:root
    production:
      AUDIT: arn:aws:iam::348043515437:root
      EVENTS: arn:aws:iam::451773080033:root

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseSecretPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref SecretPrefix
          - "none"

Globals:
  Function:
    Runtime: nodejs18.x
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt LambdaEgressSecurityGroup.GroupId
      SubnetIds:
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdB"
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        # These should always be alphabetically organised.
        AWS_STACK_NAME: !Sub ${AWS::StackName} # The AWS Stack Name, as passed into the template.
        POWERTOOLS_LOG_LEVEL: DEBUG # The LogLevel for the AWS PowerTools LogHelper
        POWERTOOLS_METRICS_NAMESPACE: F2F-CRI # The Metric Namespace for the AWS PowerTools MetricHelper
        SECRET_PREFIX: !If [
          UseSecretPrefix,
          !Ref SecretPrefix,
          !Ref AWS::StackName,
        ] # What is this? @TODO
        #  SQS_AUDIT_EVENT_PREFIX: CIC-F2F # The prefix to add to TxMA event messages
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ### Function Definition
  ## DequeueHandler
  DequeueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "F2F-Test-Dequeue-${AWS::StackName}"
      Handler: DequeueHandler.lambdaHandler
      CodeUri: ./src/
      # Environment:
      #   Variables:
          # TXMA_QUEUE_URL: !Ref TxMASQSQueue
      Policies:
        - Statement:
            - Sid: TxMAKMSDecryptkeysPolicy
              Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource:
                - !GetAtt MockTxMASQSQueue.Arn
            - Sid: TxMASQSConsumeEventPolicy
              Effect: Allow
              Action:
                # - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:ChangeMessageVisibility"
                - "sqs:ReceiveMessage"
              Resource:
                - !GetAtt MockTxMASQSQueue.Arn

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - DequeueHandler.ts

  MockTxMASQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod:
        !FindInMap [
          EnvironmentVariables,
          !Ref Environment,
          TXMAMESSAGERETENTIONPERIODDAYS,
        ]
      VisibilityTimeout: 60

# Outputs:
