AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity F2F Yoti Stub"

Parameters:
  KmsPendingWindowInDays:
    Type: Number
    Description: Number of days to retain KMS in pending deletion state when deleted
    Default: 30
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"

    ConstraintDescription: Ensure environment variable is set to one of dev, build.
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  VpcStackName:
    Type: String
    Default: "vpc-cri"
    Description: The name of the VPC stack deployed.

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:
      logretentionindays: 3
      apiTracingEnabled: true
    build:
      logretentionindays: 3
      apiTracingEnabled: true

  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      YOTISTUBURL: "yotistub.review-o.dev.account.gov.uk"
    build:
      YOTISTUBURL: "yotistub.review-o.dev.account.gov.uk"

Conditions:
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  IsProdLikeEnvironment: !Or
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    Runtime: nodejs18.x
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt LambdaEgressSecurityGroup.GroupId
      SubnetIds:
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdB"
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        # These should always be alphabetically organised.
        AWS_STACK_NAME: !Sub ${AWS::StackName} # The AWS Stack Name, as passed into the template.
        POWERTOOLS_LOG_LEVEL: INFO # The LogLevel for the AWS PowerTools LogHelper
        POWERTOOLS_METRICS_NAMESPACE: F2F-CRI # The Metric Namespace for the AWS PowerTools MetricHelper
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  YotiStubPDFBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-yoti-f2f-${Environment}
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

### Yoti stub table
  YotiSessionTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub "yoti-stub-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "session_id"
          AttributeType: "S"

      KeySchema:
        - AttributeName: "session_id"
          KeyType: "HASH"
      #      GlobalSecondaryIndexes:
      #        - IndexName: "authorizationCode-index"
      #          KeySchema:
      #            - AttributeName: "authorizationCode"
      #              KeyType: "HASH"
      #          Projection:
      #            NonKeyAttributes:
      #              - "sessionId"
      #              - "redirectUri"
      #              - "clientId"
      #              - "authSessionState"
      #            ProjectionType: "INCLUDE"
      #      TimeToLiveSpecification:
      #        AttributeName: expiryDate
      #        Enabled: true
      #      PointInTimeRecoverySpecification:
      #        PointInTimeRecoveryEnabled: true
      SSESpecification:
        KMSMasterKeyId: !Ref YotiSessionTableKey
        SSEEnabled: true
        SSEType: KMS

  YotiSessionTableKey:
      Type: AWS::KMS::Key
      Properties:
        Description: !Sub "${AWS::StackName} yoti session table key"
        Enabled: true
        KeySpec: SYMMETRIC_DEFAULT
        KeyUsage: ENCRYPT_DECRYPT
        MultiRegion: false
        PendingWindowInDays: !Ref KmsPendingWindowInDays
        EnableKeyRotation: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Sid: "Allow the account to manage the key"
              Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: "kms:*"
              Resource: "*"
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName} yoti session table key"
          - Key: Product
            Value: Gov.UK Sign On
          - Key: System
            Value: Yoti Stub
          - Key: Environment
            Value: !Ref Environment

  YotiSessionTableKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: !Sub "alias/${AWS::StackName}-yoti-session-table-key"
        TargetKeyId: !Ref YotiSessionTableKey

  ### Start of API Gateway definition.

  MockYotiRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: "dev"
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt MockYotiAPIGatewayAccessLogGroup.Arn
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './yoti-spec.yaml'
        OpenApiVersion: 3.0.2
      TracingEnabled: true
      Tags:
        Product: GOV.UK Sign In
        System: YotiMock
        Environment: !Ref Environment
        Service: backend
        Name: MockYotiRestApi
        Source: yoti

#  MockYotiAPIStageDefault:
#    Type: 'AWS::ApiGatewayV2::Stage'
#    Properties:
#      ApiId: !Ref MockYotiRestApi
#      StageName: !Ref Environment
#      AutoDeploy: true
#      DefaultRouteSettings:
#        DataTraceEnabled: false
#        DetailedMetricsEnabled: true
#        ThrottlingBurstLimit: 400
#        ThrottlingRateLimit: 200
#      AccessLogSettings:
#        DestinationArn: !GetAtt MockYotiAPIGatewayAccessLogGroup.Arn
#        Format: >-
#          {
#          "requestId":"$context.requestId",
#          "ip": "$context.identity.sourceIp",
#          "requestTime":"$context.requestTime",
#          "httpMethod":"$context.httpMethod",
#          "path": "$context.path",
#          "routeKey":"$context.routeKey",
#          "status":"$context.status",
#          "protocol":"$context.protocol",
#          "responseLength":"$context.responseLength"
#          }

  MockYotiAPIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Yoti
        - Key: Environment
          Value: Demo
        - Key: Service
          Value: backend
        - Key: Name
          Value: APIGatewayAccessLogGroup


  ### End of API Gateway definition.

  ### Function Definition
  ## Yoti Session
  MockYotiSessionFunction:
    Type: AWS::Serverless::Function
    DependsOn: MockYotiSessionFunctionLogGroup
    Properties:
      FunctionName: !Sub "Yoti-Stub-${AWS::StackName}"
      Handler: MockYotiSessionHandler.lambdaHandler
      CodeUri: ./src/
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: MockYotiSessionHandler
          # using this one temp to save incoming data
          SESSION_TABLE: !Ref YotiSessionTable
          S3_BUCKET_NAME: !Ref YotiStubPDFBucket

      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - S3FullAccessPolicy:
              BucketName: !Ref YotiStubPDFBucket
        - DynamoDBWritePolicy:
            TableName: !Ref YotiSessionTable
        - DynamoDBReadPolicy:
            TableName: !Ref YotiSessionTable
        - KMSDecryptPolicy:
            KeyId: !Ref YotiSessionTableKey

      Events:
        sessions:
          Type: Api
          Properties:
            Path: /sessions
            Method: post
            RestApiId: !Ref MockYotiRestApi
        sessionsconfiguration:
          Type: Api
          Properties:
            Path: /sessions/{sessionId}/configuration
            Method: get
            RestApiId: !Ref MockYotiRestApi
        putinstructions:
          Type: Api
          Properties:
            Path: /sessions/{sessionId}/instructions
            Method: put
            RestApiId: !Ref MockYotiRestApi
        getinstructions:
          Type: Api
          Properties:
            Path: /sessions/{sessionId}/instructions/pdf
            Method: get
            RestApiId: !Ref MockYotiRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - MockYotiSessionHandler.ts

  MockYotiSessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/Access-Token-${AWS::StackName}"
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  MockYotiSessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MockYotiSessionFunction
      Principal: apigateway.amazonaws.com

  MockYotiApiGatewayCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub
          - "${AWS::StackName}-${YOTISTUBURL}"
          - YOTISTUBURL:
              !FindInMap [ EnvironmentVariables, !Ref Environment, YOTISTUBURL ]
      DomainNameConfigurations:
        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  MockYotiApiDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref MockYotiApiGatewayCustomDomain
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
      AliasTarget:
        DNSName: !GetAtt MockYotiApiGatewayCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt MockYotiApiGatewayCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

#  MockYotiApiGatewayDeployment:
#    Type: "AWS::ApiGateway::Deployment"
#    Properties:
#      RestApiId: !Ref MockYotiRestApi
#    DependsOn: MockYotiApiGatewayCustomDomain

#  MockYotiApiGatewayMapping:
#    Type: AWS::ApiGatewayV2::ApiMapping
#    Properties:
#      DomainName: !Ref MockYotiApiGatewayCustomDomain
#      ApiId: !Ref MockYotiRestApi
#      Stage: !Sub "${AWS::StackName}-${Environment}"
#    DependsOn: MockYotiApiGatewayCustomDomain

  # Base Path Mapping
  MockYotiApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      Stage: !Ref MockYotiRestApi.Stage
      DomainName: !Ref MockYotiApiGatewayCustomDomain
      RestApiId: !Ref MockYotiRestApi
Outputs:
  MockYotiApiGatewayId:
    Description: "API GatewayID of the Yoti API"
    Value: !Sub "${MockYotiRestApi}"
    Export:
      Name: !Sub ${AWS::StackName}-MockYotiApiGatewayId
