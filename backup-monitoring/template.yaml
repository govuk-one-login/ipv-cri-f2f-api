AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  BaaS backup-vault-monitoring template version: v1.0.0
  To be deployed by product teams in their AWS accounts.
Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedValues:
      - non-prod
      - production
    Default: non-prod
  SlackWorkspaceId:
    Description: >
      The ID of the Slack workspace where alert notification messages are
      posted. This is retrieved from the AWS Chatbot integration.
    Type: String
    Default: "T8GT9416G"
    AllowedPattern: "\\w+"
    ConstraintDescription: "must be an AWS Chatbot Slack workspace ID"
  SlackChannelId:
    Description: >
      The ID of the Slack channel where alert notification messages are posted.
      This is taken from the channel details in Slack.
      Default is the di-central-backup-notifications channel.
    Type: String
    Default: "T8GT9416G" # di-f2f-dev-notifications
    AllowedPattern: "\\w+"
    ConstraintDescription: "must be a Slack channel ID"
  DeployChatBot:
    Description: >-
      Create AWS ChatBot resources for Slack integration in this stack?
      Select "Yes" to create ChatBot resources
      Select "No" if you already have AWS ChatBot channel configured separately
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  CreateChatBotRole:
    Description: >-
      Does a service-linked IAM role for AWS Chatbot already exist?
      If so, select "No".
      If not, select "Yes" to have a role created for you.
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

Conditions:
  DeployChatBot:
    Fn::Equals:
      - !Ref DeployChatBot
      - "Yes"
  DeployServiceLinkedRole: !And
    - Fn::Equals:
      - !Ref CreateChatBotRole
      - "Yes"
    - !Condition DeployChatBot

Resources:

  #################
  # BACKUP EVENTS #
  #################

  BackupEventsStatusChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "EventBridge rule on the default Event Bus for Backup related status changes."
      EventPattern:
        source:
          - aws.backup
        detail-type:
          - Recovery Point State Change
          - Restore Job State Change
        detail:
          status:
            - MODIFIED
            - ABORTED
            - FAILED
            - STOPPED
            - PARTIAL
      Name: !Sub "backup-vault-monitoring-BackupEventsStatusChangeRule"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupNotificationTopic.TopicArn
          Id: !Sub "backup-vault-monitoring-BackupEventsStatusChangeRule"
          RetryPolicy:
            MaximumEventAgeInSeconds: 300 # 5 minutes
            MaximumRetryAttempts: 5
          DeadLetterConfig:
            Arn: !GetAtt EventBusRuleDLQ.Arn

  BackupEventsStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "EventBridge rule on the default Event Bus for Backup related state changes."
      EventPattern:
        source:
          - aws.backup
        detail-type:
          - Backup Vault State Change
          - Backup Plan State Change
          - Region Setting State Change
          - Copy Job State Change
        detail:
          state:
            - DELETED
            - MODIFIED
            - FAILED
      Name: !Sub "backup-vault-monitoring-BackupEventsStateChangeRule"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupNotificationTopic.TopicArn
          Id: !Sub "backup-vault-monitoring-BackupEventsStateChangeRule"
          RetryPolicy:
            MaximumEventAgeInSeconds: 300 # 5 minutes
            MaximumRetryAttempts: 5
          DeadLetterConfig:
            Arn: !GetAtt EventBusRuleDLQ.Arn

  #####################
  # Tag change events #
  #####################

  ResourceTagChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "EventBridge rule on the default Event Bus for resource tag changes."
      EventPattern:
        source:
          - aws.tag
        detail-type:
          - Tag Change on Resource
        detail:
          changed-tag-keys:
            - BackupFrequency
          resource-type:
            - "anything-but": "recovery-point"
      Name: !Sub "backup-monitoring-BackupFrequency-TagChangeOnResource"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupNotificationTopic.TopicArn
          Id: !Sub "backup-monitoring-BackupFrequency-TagChangeOnResource"
          RetryPolicy:
            MaximumEventAgeInSeconds: 300 # 5 minutes
            MaximumRetryAttempts: 5
          DeadLetterConfig:
            Arn: !GetAtt EventBusRuleDLQ.Arn

  #######
  # DLQ #
  #######

  EventBusRuleDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "backup-vault-monitoring-EventBusRuleDLQ"
      KmsMasterKeyId: !Ref EventBusRuleDLQEncryptionKeyAlias
      VisibilityTimeout: 0
      MessageRetentionPeriod: 604800 #7 days
      Tags:
        - Key: Environment
          Value: !Ref Environment

  EventBusRuleDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref EventBusRuleDLQ
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: events.amazonaws.com
            Action:
              - "SQS:SendMessage"
            Resource: !GetAtt EventBusRuleDLQ.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt BackupEventsStatusChangeRule.Arn
                  - !GetAtt BackupEventsStateChangeRule.Arn

  EventBusRuleDLQHasNewMessages:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt BackupNotificationTopic.TopicArn
      AlarmDescription: "backup-vault-monitoring-EventBusRuleDLQ has messages"
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          ReturnData: false
          MetricStat:
            Period: 60
            Stat: Maximum
            Metric:
              Namespace: AWS/SQS
              MetricName: ApproximateNumberOfMessagesVisible
              Dimensions:
                - Name: QueueName
                  Value: !GetAtt EventBusRuleDLQ.QueueName
        - Id: e1
          Label: EventBusRuleDLQHasNewMessages
          Expression: RATE(m1)
          ReturnData: true

  EventBusRuleDLQEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for encrypting the contents of messages in the EventBus Rule DLQ."
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service:
                - sqs.amazonaws.com
                - events.amazonaws.com
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  EventBusRuleDLQEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/backup-vault-monitoring-EventBusRuleDLQEncryptionKey"
      TargetKeyId: !GetAtt EventBusRuleDLQEncryptionKey.Arn

  #############
  # SNS TOPIC #
  #############

  BackupNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "backup-vault-monitoring-BackupNotificationTopic"
      KmsMasterKeyId: !Ref BackupNotificationTopicEncryptionKey
      Tags:
        - Key: Name
          Value: !Sub "backup-vault-monitoring-BackupNotificationTopic"
        - Key: Environment
          Value: !Ref Environment

  BackupNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref BackupNotificationTopic
      PolicyDocument:
        Statement:
          - Sid: AllowPublishToSNS
            Action: "sns:Publish"
            Effect: Allow
            Resource: !Ref BackupNotificationTopic
            Principal:
              Service:
                - events.amazonaws.com
                - cloudwatch.amazonaws.com

  BackupNotificationTopicEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
                - events.amazonaws.com
                - cloudwatch.amazonaws.com
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource:
              - "*"
      Tags:
        - Key: Name
          Value: !Sub "backup-vault-monitoring-BackupNotificationTopicEncryptionKey"
        - Key: Environment
          Value: !Ref Environment

  BackupNotificationTopicEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/backup-vault-monitoring-BackupNotificationTopicEncryptionKey"
      TargetKeyId: !GetAtt BackupNotificationTopicEncryptionKey.Arn

  #############################
  # SLACK CHATBOT INTEGRATION #
  #############################

  BackupChatbotRole:
    Condition: DeployChatBot
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "chatbot.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: Name
          Value: !Sub "backup-vault-monitoring-BackupChatbotRole"
        - Key: Environment
          Value: !Ref Environment

  BackupSlackChannelConfiguration:
    Condition: DeployChatBot
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties:
      ConfigurationName: !Sub "backup-vault-monitoring-BackupSlackChannelConfiguration"
      IamRoleArn: !GetAtt BackupChatbotRole.Arn
      SlackChannelId: !Ref SlackChannelId
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SnsTopicArns:
        - !Ref BackupNotificationTopic

  ChatbotServiceLinkedRole:
    Condition: DeployServiceLinkedRole
    Type: AWS::IAM::ServiceLinkedRole
    DeletionPolicy: Retain
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3011  # The UpdateReplacePolicy does not apply to this resource
    Properties:
      AWSServiceName: management.chatbot.amazonaws.com

Outputs:
  BackupNotificationTopicARN:
    Description: The ARN of the backup notification SNS topic
    Value: !Ref BackupNotificationTopic
    Export:
      Name: !Sub ${AWS::StackName}-BackupNotificationTopic